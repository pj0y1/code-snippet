from typing import List
import copy

class Solution:
    def hitBricks(self, grid: List[List[int]], hits: List[List[int]]) -> List[int]:
        g = copy.deepcopy(grid)
        for r, c in hits:
            g[r][c] = 0

        stable = set()
        for i, v in enumerate(g[0]):
            if v:
                stable.add((0,i))
        q = list(stable)
        while q:
            c,d = q.pop(0)
            if c > 0 and (c-1,d) not in stable and g[c-1][d]:
                q.append((c-1,d))
                stable.add((c-1,d))
            if d > 0 and (c,d-1) not in stable and g[c][d-1]:
                q.append((c,d-1))
                stable.add((c,d-1))
            if d < len(grid[0])-1 and (c,d+1) not in stable and g[c][d+1]:
                q.append((c,d+1))
                stable.add((c,d+1))
            if c < len(grid)-1 and (c+1,d) not in stable and g[c+1][d]:
                q.append((c+1,d))
                stable.add((c+1,d))
        # r=1
        # while r < len(g):
        #     direct = []
        #     for c, v in enumerate(g[r]):
        #         if (r-1,c) in stable and v:
        #             direct.append((r,c))
        #             stable.add((r,c))
        #     for _, c in direct:
        #         d = c
        #         while d > 0:
        #             if g[r][d-1]:
        #                 stable.add((r,d-1))
        #                 d -= 1
        #             else:
        #                 break
        #         d = c
        #         while d < len(grid[r]) - 1:
        #             if g[r][d+1]:
        #                 stable.add((r,d+1))
        #                 d += 1
        #             else:
        #                 break
        #     r += 1
        print(stable)
        result = [len(stable)]
        for a, b in hits[::-1]:
            if not grid[a][b]:
                result.append(result[-1])
                continue
            g[a][b]=1
            tmp = []
            if a == 0:
                stable.add((a,b))
            elif (a-1,b) in stable:
                stable.add((a,b))
            elif (a, b-1) in stable:
                stable.add((a,b))
            elif (a+1, b) in stable:
                stable.add((a,b))
            elif (a, b+1) in stable:
                stable.add((a,b))
            else:
                result.append(result[-1])
                continue
            new = [(a,b)]
            tmp.append((a,b))
            while new:
                c,d = new.pop(0)
                if c > 0 and (c-1,d) not in stable and g[c-1][d]:
                    new.append((c-1,d))
                    tmp.append((c-1,d))
                    stable.add((c-1,d))
                if d > 0 and (c,d-1) not in stable and g[c][d-1]:
                    new.append((c,d-1))
                    tmp.append((c,d-1))
                    stable.add((c,d-1))
                if d < len(grid[0])-1 and (c,d+1) not in stable and g[c][d+1]:
                    new.append((c,d+1))
                    tmp.append((c,d+1))
                    stable.add((c,d+1))
                if c < len(grid)-1 and (c+1,d) not in stable and g[c+1][d]:
                    new.append((c+1,d))
                    tmp.append((c+1,d))
                    stable.add((c+1,d))
            print(len(stable), tmp)
            result.append(len(stable))
            #print(stable)

        #result.append(final)
        # print(result[-2:])
        print(result)
        diff = []
        i=1
        while i < len(result):
            v = result[i]-result[i-1]
            if v:
                diff.insert(0, v-1)
            else:
                diff.insert(0,v)
            i += 1
        return diff


if __name__ == "__main__":
    grid = [[1,0,0,1,1,1,1,0,0,1,0,1,1,0,1,1,0,1,0,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,0,1,1,0,0,0,1,0,1,0,0,1,1],[1,1,1,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,1,0,1,0,1,1,1,0,0,0,1,0,0,0,0,0,1,0,1,1],[0,1,1,0,0,1,1,1,1,0,1,0,1,1,0,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,0,1,1,0,0,0,0,1,1,0,1,0,0,0,0,1,0,1,1,0,1],[0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,1,0,0,0,0,1,1,1,1,1,1,1,0,1,0,0,1,0,0,1,0,0,0,1,0,1,0,0,1,1,1,0,1,0,1,1,0,0],[0,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,0,1,0,1,0,0,1,0,1,1,0,0],[0,0,1,1,0,0,1,1,0,0,0,0,1,0,0,1,0,1,1,1,1,1,0,1,1,0,0,1,1,0,0,0,0,1,0,1,1,1,1,1,1,0,0,0,1,0,0,1,1,0,1,0,0],[1,1,1,1,1,0,0,0,0,1,0,1,0,1,0,1,0,0,0,1,1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1,0,0,1,0,1,0,0,1,1,1,1,1,1,0,1,1],[1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,0,1,1],[1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,0,0,1,1,0,1,1,1,1,1,0,1,0,1,1,1,0,0,1,0,0,1,0,0,1,1,1,0,0,0,0,0],[0,0,0,1,0,1,1,1,0,1,1,0,0,1,0,1,0,1,1,1,0,0,0,1,1,0,0,0,0,0,1,1,0,0,1,0,1,0,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0],[0,0,0,1,1,1,0,1,1,1,1,0,0,0,1,0,1,0,1,1,1,1,0,0,0,1,0,1,1,1,0,1,0,0,0,0,1,1,0,0,1,0,1,0,0,1,0,0,0,1,0,1,1],[0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,1,1,0,0],[1,1,0,0,1,0,0,1,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,1,1,1,1,0,1,0,1,0,0,1,1,1,1,1,1,1,0,0,0,1,0,1,1,1,0,1],[0,0,1,0,1,0,0,1,1,1,0,1,1,1,1,0,0,0,1,0,0,0,0,0,1,1,0,0,1,1,1,0,1,0,1,1,1,1,1,1,1,0,0,1,1,1,0,0,0,1,0,0,1],[1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,0,1,0,0,1,1,0,0,1,1,0,1,0,1,0,1,1,0,0,0,1,1,0,0,1,1,0,0,0,1,1,0,0,1,0],[1,1,1,1,0,1,0,0,0,0,1,1,1,0,0,1,1,0,1,1,0,1,0,0,0,0,0,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,1,0,1,0,0,1],[0,1,1,0,1,1,0,1,1,0,1,0,0,1,1,1,1,1,0,1,0,0,0,0,0,1,0,1,1,0,1,0,0,1,1,1,0,1,0,1,0,1,0,0,0,1,1,1,0,1,1,0,0],[1,0,0,1,1,0,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,0,0,1,0,0,1,1,1,1,1,0,1,0,1,1,0,1,0,1,0,1,0,1,1,1,0,1,1,0,1,0,0],[1,1,0,1,0,1,1,0,1,0,0,0,0,0,0,1,0,1,0,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,0,1,0,0,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1],[1,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,0,0,0,1,1,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0],[0,0,0,0,0,1,0,1,1,1,0,1,1,0,0,0,1,0,1,0,1,1,0,0,1,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,0,1,1,1,1,1],[1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,0,0,0,1,1,0,1,0,1,1,0,0,0,0,1,1,1,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,1,1],[0,1,0,1,1,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,1,1,1,1,1,0,0,1,0,1,1,1,1,1,0,1,1,0,0,0,0,0],[1,0,1,1,0,1,0,1,0,1,0,0,1,1,1,1,1,1,1,0,1,1,0,0,0,1,0,1,1,1,0,1,1,0,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1],[0,0,0,1,0,1,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,0,1,1,1,0,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0],[1,0,0,1,1,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,1,0,1,0,1,1,1,1,1,0,0,1,0,0,1,0],[0,0,1,1,1,0,1,1,0,0,1,0,1,0,1,1,1,0,1,0,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,1,0,1,0,1,1,0],[1,1,0,1,1,1,0,1,0,1,1,0,1,0,1,0,0,1,1,0,1,0,0,1,1,1,0,0,0,1,1,1,1,0,1,0,0,1,0,1,0,0,1,0,1,1,1,0,1,1,1,0,0],[0,0,0,1,1,1,1,1,1,0,1,0,0,0,0,1,1,0,1,1,1,1,0,0,1,1,0,0,0,1,0,1,1,1,0,0,1,1,1,1,0,1,0,1,0,0,0,0,1,1,1,1,1],[0,0,0,1,1,1,1,1,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,1,1,1,1,1,1,0,1,0,1,0,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,1,0],[1,1,0,0,0,0,0,0,0,1,0,1,1,0,1,1,1,0,1,0,1,1,0,0,1,0,1,0,1,1,0,0,0,1,0,0,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0],[1,1,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,0,0,1,0,0],[0,1,1,1,1,1,1,0,1,0,0,1,0,1,0,1,1,0,1,1,1,0,1,0,1,0,0,1,1,0,1,0,1,0,0,0,1,1,1,1,0,1,1,1,1,0,1,0,0,0,1,0,0],[1,0,0,0,0,1,0,1,0,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,0,1,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,1,0,1],[1,0,1,0,1,1,1,1,0,1,1,1,0,0,1,0,0,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,1,0,1,0,1,0,0,0,0,1,1,0,0,0,0,1,0,1],[1,0,1,0,0,0,0,0,1,1,0,0,1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,1,0,0,1,1,0],[1,0,1,1,0,1,1,0,0,1,0,0,1,0,1,0,0,0,0,1,0,1,0,0,0,0,1,1,0,0,1,1,1,1,0,1,0,0,0,0,1,0,0,0,0,0,1,1,1,1,0,1,0],[1,0,0,1,1,0,1,0,1,0,0,1,0,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,0,0,0,0,1,0,1,1,1,1,1,1,0,1,0,0,1,0],[1,0,1,1,0,1,0,0,1,0,0,0,0,1,1,1,0,1,1,0,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,1,0,1,1,1,0,1,1,0,1,1,0,0,0],[0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,0,0,1,1,1,1,0,1,1,0,1,1,0,0,1,0,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,1,1,0,0,0,1,0],[0,1,1,0,1,1,1,0,0,1,1,0,1,0,0,0,1,1,0,1,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,1,1],[0,1,1,1,0,1,1,0,0,0,1,1,0,1,1,1,0,0,0,0,1,0,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,1,0,0,1],[0,0,1,0,0,1,1,0,0,1,0,1,0,1,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,0,1,1,1,0,1,0,1,1,0,0],[0,1,1,1,1,1,1,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,1,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,0,0,0,1],[0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,1,1,1,1,0,1,1,1,1,0,1,1,0,0,1,0,1,0,1,1,0,0,1,0,0,0,1,0,1,1,0,0],[0,1,1,0,1,1,0,0,0,0,1,1,1,1,0,1,0,0,0,0,1,1,1,1,0,1,0,0,0,0,0,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,1,0,0,1,1,0],[1,1,0,1,1,0,1,1,1,0,1,0,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,1,0,1,0,1,1,0,1,0,0,0,1,0,1,1,0,1,0,0,0,0,1,1,1],[0,1,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,0,0,1,1,0,0,1,1,0,1,1,0,1,0,1,1,1,1,1,1,0,0,1],[1,1,0,0,1,1,1,0,0,1,1,0,0,0,1,0,0,1,0,0,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,1,0,1,0,0,1],[1,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,1,0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1,1,1,0,0,0,1,0,0,0,0,1,0,1,1,0,0,1],[1,1,0,0,0,1,1,0,0,0,1,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0]]
    hits = [[15,47],[48,34],[16,27],[24,31],[44,4],[13,38],[1,10],[8,2],[13,2],[31,28],[16,24],[31,39],[35,10],[11,25],[21,50],[0,40],[35,32],[39,4],[46,39],[16,28],[10,42],[42,26],[12,4],[11,19],[7,46],[18,49],[2,52],[29,31],[7,23],[35,2],[17,7],[34,48],[48,10],[12,52],[49,22],[49,30],[15,37],[29,28],[35,41],[28,11],[32,40],[14,31],[12,12],[34,12],[14,2],[9,35],[19,2],[2,21],[9,23],[1,1],[20,26],[46,49],[6,17],[18,25],[47,29],[41,41],[39,10],[0,52],[27,3],[14,7],[43,45],[35,4],[17,43],[36,39],[46,23],[50,15],[0,29],[9,44],[39,13],[41,23],[19,30],[15,23],[13,37],[1,12],[48,45],[27,36],[15,2],[43,27],[24,41],[27,52],[30,19],[9,38],[51,51],[0,45],[15,52],[8,48],[36,9],[38,33],[17,12],[46,46],[45,51],[39,52],[21,23],[18,45],[26,23],[43,20],[4,17],[1,16],[38,40],[28,0],[48,25],[6,50],[10,20],[2,44],[5,31],[26,15],[38,48],[24,34],[25,30],[34,44],[25,51],[8,14],[2,30],[21,24],[33,11],[9,51],[15,49],[34,50],[22,42],[30,31],[24,45],[41,45],[46,19],[24,24],[45,49],[6,18],[8,25],[13,50],[44,27],[5,27],[24,36],[10,32],[8,17],[16,44],[11,21]]
    ans = Solution().hitBricks(grid,hits)
    print(ans)